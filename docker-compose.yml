version: "3.8"

services:
  db:
    networks:
      - internal
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    networks:
      - internal
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      FRONTEND_HOST: ${FRONTEND_HOST}
      FRONTEND_PORT: ${FRONTEND_PORT}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      EMAIL_FROM: ${EMAIL_FROM}
      APP_PASSWORD: ${APP_PASSWORD}
    volumes:
      - notesheet_files:/app/uploads
    depends_on:
      db:
        condition: service_healthy

  frontend:
    networks:
      - internal
    build:
      context: ./frontend
      dockerfile: ${NODE_ENV:-development}.Dockerfile
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next

networks:
  internal:
    internal: true

volumes:
  postgres_data:
  notesheet_files:
